var oContentMgr = App.getContentMgr();
var oImageMgr = App.getImageMgr();
var oScriptArgs = JSON.parse(App.scriptArgs[0]);
var nTotalNumberOfInstances = oScriptArgs['num_instances'];
var sMasterTemplatePath = oScriptArgs['template_path'];
var oScriptFileInfo = new DzFileInfo(getScriptFileName());
var sScriptPath = oScriptFileInfo.path();
var nInstanceNumber = App.instanceName();
var sOutputDirectory = oScriptArgs['image_output_dir'];
var oOutputDirectory = new DzDir(sOutputDirectory);
var sResultsDirectory = oScriptArgs['results_directory_path'];
var oResultsDirectory = new DzDir(sResultsDirectory);
var sSubjectFilepath = oScriptArgs['subject_file'];
var aAnimationFilepaths = oScriptArgs['animations'].toString().split(',');
var aPropAnimationFilepaths = oScriptArgs['prop_animations'].toString().split(',');
var aGearFilepaths = oScriptArgs['gear'].toString().split(',');
var aGearAnimationFilepaths = oScriptArgs['gear_animations'].toString().split(',');
var nDEGREES_IN_CIRCLE = 360;
var nFrameRate = oScriptArgs['frame_rate'];
var bRenderShadows = oScriptArgs['render_shadows'];
var nDAZ_TICKS = 4800;
var nTicksPerFrame = nDAZ_TICKS / nFrameRate;
var bOverwriteExistingImages = false;
var oRenderMgr;
var oIrayOptions;
var oRenderer;
var oEnvironmentOptionsPropertyGroups;
var oRenderOptions;
var oDrawGroundProperty;
var oEnvironmentModeProperty;
var oRoot;
var oShadowPlane;
var oSettings = new DzSettings();
var oHttpHelper = new DzHttpHelper();
var oHttp = new DzHttpHelper();
var nCacheDbSizeThreshold = oScriptArgs['cache_db_size_threshold_gb'];
// Cleanest way I can find to get the active user profile name
var sUserName = App.getAppDataPath().split('/')[2];
var sCacheFolderPath = 'C:/Users/' + sUserName + '/AppData/Local/Overlord/cache';
var oCacheDbFile;
var sScriptFileName = getScriptFileName();
var oScriptFileInfo = new DzFileInfo(sScriptFileName);
var oScriptDirectory = oScriptFileInfo.dir(); // DzDir object
var sRestartIrayServerScript = oScriptDirectory.absoluteFilePath('restartIrayServer.vbs');
var nPNG_EXPORTER_ID = 1;

var sAddress = '127.0.0.1';
var sPort = 9090;
var sSecurity = 'http';
var sSecureProtocol = 'https';

oHttp.setConnectionMode(sSecurity);
oHttp.setHost(sAddress);
oHttp.setPort(sPort);
oHttp.setPath("/");
oHttp.setRequestMethod("GET");

oSettings.setIntValue('Connection', 0);
oSettings.setStringValue('Server', sAddress);
oSettings.setBoolValue('Secure', sSecurity == sSecureProtocol);
oSettings.setIntValue('Port', sPort);
oSettings.setStringValue('Username', 'admin');
oSettings.setStringValue('Password', 'admin');

function wait(seconds) {

	sleep(seconds * 1000);
}

// Kill Iray server if it's running, then remove the cache file if it exists, then restart it
function restartIrayServer() {

	// Use the combined restart script that handles kill, cache cleanup, and start
	App.log('Restarting Iray Server with ' + sRestartIrayServerScript);
	App.showURL(sRestartIrayServerScript);
	
	// Wait for the restart process to complete
	wait(5);
}
// Check if a file exists and isn't 0 bytes
function exists(sFilePath) {

	var oFileInfo = new DzFileInfo(sFilePath);

	return oFileInfo.exists() && oFileInfo.size() > 0;
}
// Obtain the desired name out of a filepath or filename.
function getName(sFileName) {
	return new DzFileInfo(sFileName).completeBaseName();
}
// The Overlord UI passes an array with a single, undefined object
// whenever filepath(s) are not specified.
function thereAre(aArray) {
	return aArray[0] !== '';
}
// Set the Matte Parameter of a subject and its children.
function setMatte(oSubject, bBool) {

	var sIrayMatteLabel = 'Enable Iray Matte';

	oSubject.oMatteParameter = oSubject.findPropertyByLabel(sIrayMatteLabel);

	if (oSubject.oMatteParameter) {

		oSubject.oMatteParameter.setValue(bBool);
	}

	for (var nChildCounter = 0; nChildCounter != oSubject.aChildren.length; nChildCounter++) {

		var oChild = oSubject.aChildren[nChildCounter];

		oChild.oMatteParameter = oChild.findPropertyByLabel(sIrayMatteLabel);

		if (oChild.oMatteParameter) {

			oChild.oMatteParameter.setValue(bBool);
		}
	}
}
function renderCore(sSubjectName, sAnimationName, bIsGear, bIsShadow) {

	// These variables have to be determined when we start rendering
	oRenderMgr = App.getRenderMgr();
	oIrayOptions = oRenderMgr.getRenderElementObjects()[1];
	oRenderer = oRenderMgr.findRenderer('DzIrayRenderer');
	oRenderer.setBridgeConfiguration(oSettings);
	oEnvironmentOptionsPropertyGroups = oRenderMgr.getRenderElementObjects()[3].getPropertyGroups();
	oRenderOptions = oRenderMgr.getRenderOptions();
	oDrawGroundProperty = oEnvironmentOptionsPropertyGroups.findProperty('Draw Ground');
	oEnvironmentModeProperty = oEnvironmentOptionsPropertyGroups.findProperty('Environment Mode');
	oRoot = Scene.findNodeByLabel('root');
	oRootYRotControl = oRoot.getYRotControl();
	oShadowPlane = Scene.findNodeByLabel('shadowPlane');
	var oCamera = Scene.findCameraByLabel('isometricCamera');

	// Read the subject's JSON to see how many angles it has
	{
		var oSubjectFile = new DzFile(sSubjectFilepath);
		var nAngles = 16;

		oSubjectFile.open(DzFile.ReadOnly);

		var nAnglesFromJson = JSON.parse(oSubjectFile.read()).asset_info.angles;

		oSubjectFile.close();

		if (nAnglesFromJson) nAngles = nAnglesFromJson;
		else App.warning('Number of angles not found in the JSON for ' + sSubjectFilepath +
			'. Using default of value of ' + nAngles + ' angles.');

		var nDegrees = nDEGREES_IN_CIRCLE / nAngles;
	}
	
	// Read the animation's JSON to see how many frames it has
	if (sAnimationName != 'static') {
		// https://github.com/Vineyard-Technologies/Overlord/discussions/4
		var oAnimationFile = new DzFile(sAnimationFilepath);

		oAnimationFile.open(DzFile.ReadOnly);
		var oAnimationsJson = JSON.parse(oAnimationFile.read()).scene.animations;
		oAnimationFile.close();

		for (var nJsonCounter = 0; nJsonCounter < oAnimationsJson.length; nJsonCounter++) {
			var nNumberOfFrames = oAnimationsJson[nJsonCounter].keys.length;

			if (nNumberOfFrames > 1) {
				// Subtract 1 here to make it 0-based
				Scene.setAnimRange(DzTimeRange(0, (nNumberOfFrames - 1) * nTicksPerFrame));

				break;
			}
		}
	} else Scene.setAnimRange(DzTimeRange(0, 0));

	if (bIsGear) {
		// Add the gear to the canvas.
		oIrayOptions.addNodeToNodeList('visibleNodes', oGear);

		// Add all gear children to the canvas as well.
		for (var nGearChildrenCounter = 0; nGearChildrenCounter != aGearChildren.length; nGearChildrenCounter++)
			oIrayOptions.addNodeToNodeList('visibleNodes', aGearChildren[nGearChildrenCounter]);
	}

	// Add the subject as a child to the root
	oRoot.addNodeChild(oSubject, true);

	// variables that have to be determined when we start rendering
	var nFramesTotal = Scene.getPlayRange().end / nTicksPerFrame;

	// Loop through each angle...
	for (var nAngle = 0; nAngle != nDEGREES_IN_CIRCLE; nAngle = nAngle + nDegrees) {
		var nOutputAngle = 90 - nAngle;
		if (nOutputAngle <= -180) nOutputAngle += 360;

		// Loop through each frame...
		for (var nFrame = 0; nFrame <= nFramesTotal; nFrame++) {
			// Check if the current Daz instance should render this frame.
			if ((nFrame - (nInstanceNumber - 1)) % nTotalNumberOfInstances != 0) continue;

			var sFinalName = sSubjectName + (bIsShadow ? '_shadow-' : '-') + sAnimationName + '_' + nOutputAngle + '-' + ('000' + nFrame).slice(-3);
			var sNameInResultsFolder = sResultsDirectory + '/' + sFinalName + '/' + sFinalName + (bIsGear && !bIsShadow ? '-GearCanvas-Beauty.png' : '-Beauty.png');
			var sNameInOutputFolder = sOutputDirectory + '/' + sFinalName + '.png';

			if (exists(sNameInOutputFolder)) {

				App.log(sNameInOutputFolder + ' already exists. Skipping this frame.');

				continue;
			}

			App.log('Setting frame to ' + nFrame);
			Scene.setFrame(nFrame);
			// Do this every frame, or else it will interpolate.
			App.log('Setting root Y rotation to ' + nAngle);
			oRootYRotControl.setValue(nAngle);

			if (bIsShadow) {
				// Scene Only
				oEnvironmentModeProperty.setValue(3);
				oDrawGroundProperty.setValue(true);
				oShadowPlane.setVisible(true);
				oIrayOptions.renderToCanvases = false;
				if (bIsGear) setMatte(oSubject, true);
			} else {
				// Sun-Sky Only
				oEnvironmentModeProperty.setValue(2);
				oDrawGroundProperty.setValue(false);
				oShadowPlane.setVisible(false);
				setMatte(oSubject, false);
				if (bIsGear) oIrayOptions.renderToCanvases = true;
			}
			// Wait for everything else to finish first, specifically the mesh smoother
			while (backgroundProgressIsActive()) processEvents();

			oCacheDbFile = new DzFileInfo(sCacheFolderPath + '/cache.db');

			// Check if cache.db is over the threshold (10GBs)
			if (oCacheDbFile.exists() && oCacheDbFile.size() > nCacheDbSizeThreshold * 1024 * 1024 * 1024) {

				App.log('Cache database is over ' + nCacheDbSizeThreshold + 'GBs: ' + oCacheDbFile.size() / (1024 * 1024 * 1024) + 'GBs. Restarting Iray Server...');

				restartIrayServer();

			}
			else {
				App.log('Cache database path: ' + oCacheDbFile.absoluteFilePath());
				App.log('Cache database exists? ' + oCacheDbFile.exists());
				App.log('Cache database is under ' + nCacheDbSizeThreshold + 'GBs: ' + oCacheDbFile.size() / (1024 * 1024 * 1024) + 'GBs.');
			}

			App.log('Sending render to Iray Server...');
			
			var sHttpRequestError;
			var nHttpAttempts = 0;
			var nMAX_HTTP_ATTEMPTS = 5;

			do {

				// This returns a truthy byteArray regardless of the status
				// of the server, so we're not using it to check server status.
				oHttp.doSynchronousRequest();

				// This returns an empty string upon successful connection,
				// otherwise it returns the error as a string.
				sHttpRequestError = oHttp.getError();

				if (sHttpRequestError) {
					nHttpAttempts++;
					App.log('HTTP request error (attempt ' + nHttpAttempts + '/' + nMAX_HTTP_ATTEMPTS + '): ' + sHttpRequestError);

					if (nHttpAttempts >= nMAX_HTTP_ATTEMPTS) {

						App.log('Maximum HTTP attempts reached. Restarting Iray Server...');

						restartIrayServer();

						nHttpAttempts = 0;
						
						// Give Iray Server some time to start
						wait(30);
						
					} else {

						wait(1);
					}
				}
				else {
					App.log('HTTP request successful.');
				}

			} while (sHttpRequestError);

			oRenderer.exportRenderToBridgeQueue(sFinalName, 'png', oCamera, oRenderOptions, 0);

			var nAttempts = 0;
			var nAllowedAttempts = 20;
			while (!exists(sNameInResultsFolder)) {

				App.log('Attempt ' + nAttempts + ': Waiting for ' + sNameInResultsFolder + ' to appear.');

				wait(1);
				nAttempts++;

				if (nAttempts > nAllowedAttempts) {
					App.log('Waited more than ' + nAllowedAttempts + ' seconds for ' + sFinalName + '. Retrying this frame.');
					nFrame--; // retry this frame
					break;
				}
			}

			if (sNameInResultsFolder.search('.exr') != -1) {

				var oImage = oImageMgr.loadImage(sNameInResultsFolder);
				var sNewNameInFolder = sNameInResultsFolder.replace('.exr', '.png');

				oImageMgr.saveImage(oImage, sResultsDirectory + '/' + sNewNameInFolder, nPNG_EXPORTER_ID);

				oResultsDirectory.remove(sNameInResultsFolder);

				sNameInResultsFolder = sNewNameInFolder;

			}

			// We can also rename the file with this function
			App.log('Moving ' + sNameInResultsFolder + ' to ' + sOutputDirectory + '/' + sFinalName + '.png');
			oResultsDirectory.move(sNameInResultsFolder, sOutputDirectory + '/' + sFinalName + '.png');

			App.log('Deleting canvas .zip file: ' + sResultsDirectory + '/' + sFinalName + '.zip');
			oResultsDirectory.remove(sFinalName + '.zip');
			
			App.log('Deleting folder: ' + sResultsDirectory + '/' + sFinalName);
			oResultsDirectory.rmdir(sFinalName);
		}
	}
	if (bRenderShadows) {
		if (!bIsShadow) renderCore(sSubjectName, sAnimationName, bIsGear, true);
	}
}
function filterFilepathsBySuffix(aFilepaths, suffix) {
	var result = [];
	for (var i = 0; i < aFilepaths.length; i++) {
		if (aFilepaths[i].indexOf(suffix) === aFilepaths[i].length - suffix.length) {
			result.push(aFilepaths[i]);
		}
	}
	return result;
}

// Clean up any previous Iray Server instance, and start with a clean slate
restartIrayServer();

// Make the output directory if it doesn't exist
if (!oOutputDirectory.exists()) {

	App.log('"' + sOutputDirectory + '" does not exist. Creating directory...');

	oOutputDirectory.mkdir();

	App.log('Created "' + sOutputDirectory + '".');
}

var sSubjectName = getName(sSubjectFilepath);

if (thereAre(aAnimationFilepaths)) {
	for (var nAnimationFilepathsCounter = 0; nAnimationFilepathsCounter != aAnimationFilepaths.length; nAnimationFilepathsCounter++) {
		var sAnimationFilepath = aAnimationFilepaths[nAnimationFilepathsCounter];
		var sAnimationName = getName(sAnimationFilepath);

		// Start with a blank scene
		oContentMgr.openFile(sMasterTemplatePath, false);

		// Merge in the subject
		oContentMgr.openFile(sSubjectFilepath, true);

		var oSubject = Scene.findNodeByLabel('subject');
		
		/*
		We have to turn off limits for the subject and its children
		because the perferences parameter "When importing a Pose/Shaping file that exceeds limits :"
		(under the 'Content' tab) is _not_ set to "Always turn limits off"
		on headless runs and fresh Daz Studio installs.
		*/
		oSubject.aPropertyList = oSubject.getPropertyList();

		// Turn off limits for all the subject's properties
		for (var nPropertyCounter = 0; nPropertyCounter != oSubject.aPropertyList.length; nPropertyCounter++) {

			var oProperty = oSubject.aPropertyList[nPropertyCounter];

			turnLimitOff(oProperty);
		}

		// We use the subject's children to turn off their matte parameter,
		// and to turn off their limits.
		oSubject.aChildren = oSubject.getNodeChildren(true);

		// Give the subject's children a property containing their property list
		for (var nChildCounter = 0; nChildCounter != oSubject.aChildren.length; nChildCounter++) {

			var oChild = oSubject.aChildren[nChildCounter];

			oChild.aPropertyList = oChild.getPropertyList();

			// Loop through that property list, turning off limits
			for (var nPropertyCounter = 0; nPropertyCounter != oChild.aPropertyList.length; nPropertyCounter++) {

				var oProperty = oChild.aPropertyList[nPropertyCounter];

				turnLimitOff(oProperty);
			}
		}

		// Limits are called "limits" in the UI, and "clamps" in Daz Script
		function turnLimitOff(oProperty) {

			// If this property has a 'setIsClamped' function...
			if (!!oProperty.setIsClamped) {

				oProperty.setIsClamped(false);
			}
		}

		oContentMgr.openFile(sAnimationFilepath, true);

		if (thereAre(aPropAnimationFilepaths)) {
			for (var nPropAnimationCounter = 0; nPropAnimationCounter != aPropAnimationFilepaths.length; nPropAnimationCounter++) {
				
				var sPropAnimationFilepath = aPropAnimationFilepaths[nPropAnimationCounter];
				var sPropAnimationFileName = getName(sPropAnimationFilepath);
				var aPropAnimationProperties = sPropAnimationFileName.split('-');
				var sAnimationOfPropAnimation = aPropAnimationProperties.shift();
				var sPropOfPropAnimation = aPropAnimationProperties.pop();

				if (sAnimationName == sAnimationOfPropAnimation) {
					
					var oProp = Scene.findNodeByLabel(sPropOfPropAnimation);

					oSubject.select(false);
					oProp.select(true);

					oContentMgr.openFile(sPropAnimationFilepath, true);

					oProp.select(false);
					oSubject.select(true);
				} else continue;
			}
		}

		if (thereAre(aGearFilepaths)) {
			for (var nGearCounter = 0; nGearCounter != aGearFilepaths.length; nGearCounter++) {
				var sGearFilepath = aGearFilepaths[nGearCounter];

				oContentMgr.openFile(sGearFilepath, true);

				var sGearName = getName(sGearFilepath);
				var oGear = Scene.findNodeByLabel('gear');

				var aGearChildren = oGear.getNodeChildren(false);

				renderCore(sSubjectName + '_' + sGearName + '_gear', sAnimationName, true, false);

				Scene.removeNode(oGear);
			}
		} else renderCore(sSubjectName, sAnimationName, false, false);
	}
} else {
	oContentMgr.openFile(sMasterTemplatePath, false);

	oContentMgr.openFile(sSubjectFilepath, true);

	var oSubject = Scene.findNodeByLabel('subject');

	renderCore(sSubjectName, 'static', false, false);
}

// App.delayedExit();